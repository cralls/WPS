<?xml version="1.0"?>
<files> 
<file filename="google_export.xml"> 
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:php="http://php.net/xsl" exclude-result-prefixes="php">
<xsl:output method="xml" indent="yes" encoding="UTF-8"/>

<xsl:template match="/">

<!-- IMPORTANT: ADJUST THIS! Use your currency, three letter code -->
<xsl:variable name="currency"><xsl:text>USD</xsl:text></xsl:variable>

<rss version="2.0" xmlns:g="http://base.google.com/ns/1.0">
    <channel>
        <title>Name of data feed</title>
        <link>http://www.example.com</link>
        <description>Description of data feed</description>

        <xsl:for-each select="objects/object">
            <xsl:element name="item">
                <xsl:element name="g:id"><xsl:value-of select="sku"/></xsl:element> 
                <xsl:element name="title"><xsl:value-of select="name"/></xsl:element>            
                <xsl:element name="description">
                    <xsl:choose>
                    <xsl:when test="string(description)">
                    <xsl:text disable-output-escaping="yes">&lt;![CDATA[</xsl:text><xsl:value-of select="substring(php:functionString('str_replace',php:functionString('chr',34),'',php:functionString('strip_tags',description)), 1, 10000)"/><xsl:text disable-output-escaping="yes">]]&gt;</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;![CDATA[</xsl:text><xsl:value-of select="substring(php:functionString('str_replace',php:functionString('chr',34),'',php:functionString('strip_tags',parent_item/description)), 1, 10000)"/><xsl:text disable-output-escaping="yes">]]&gt;</xsl:text>
                    </xsl:otherwise>
                    </xsl:choose>
                </xsl:element>

                <xsl:element name="g:google_product_category"><xsl:value-of select="xtento_mapped_category"/></xsl:element> 

                <xsl:element name="g:product_type">
                    <xsl:choose>
		    <xsl:when test="string(xtento_mapped_category)"><xsl:value-of select="xtento_mapped_category"/></xsl:when>	
                    <xsl:when test="string(cats/cat[children_count=0]/path_name)">
                    <xsl:value-of select="substring-after(substring-after(cats/cat[children_count=0]/path_name,'>'),' > ')" />
                    </xsl:when>
                    <xsl:otherwise>
                    <xsl:value-of select="substring-after(substring-after(parent_item/cats/cat[children_count=0]/path_name,'>'),' > ')" />
                    </xsl:otherwise>
                    </xsl:choose>
                </xsl:element>

                <xsl:element name="link">
                  <!-- Sample code to output option parameters in URL for simple products can be found in our wiki: https://support.xtento.com/wiki/Magento_2_Extensions:Magento_Product_Feed_Export_Module#Helpful_code_snippets -->
                  <xsl:variable name="product_link">
                    <xsl:choose>
                        <xsl:when test="not(product_type='grouped') and string(parent_item/product_url) and string(parent_item/option_parameters_in_url)"><xsl:value-of select="concat(parent_item/product_url,'#',parent_item/option_parameters_in_url)"/></xsl:when>
                        <xsl:when test="string(product_url) and string(option_parameters_in_url)"><xsl:value-of select="concat(product_url,'#',option_parameters_in_url)"/></xsl:when>
                        <xsl:when test="not(product_type='grouped') and string(parent_item/product_url)"><xsl:value-of select="parent_item/product_url"/></xsl:when>
                        <xsl:otherwise><xsl:value-of select="product_url"/></xsl:otherwise>
                    </xsl:choose>
                    <!--<xsl:choose>
                    <xsl:when test="string(product_url)"><xsl:value-of select="product_url"/></xsl:when>
                    <xsl:otherwise>
                    <xsl:value-of select="parent_item/product_url"/>
                    </xsl:otherwise>
                    </xsl:choose>-->
                  </xsl:variable>
                  <xsl:value-of select="$product_link"/>
                </xsl:element> 

                <xsl:variable name="img">
                    <xsl:choose>
                    <xsl:when test="string(image) and not(contains(image,'no_selection'))"><xsl:value-of select="image"/></xsl:when>
                    <xsl:otherwise>
                    <xsl:value-of select="parent_item/image" />
                    </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:element name="g:image_link">
                    <xsl:value-of select="$img" /> 
                </xsl:element> 

                <xsl:choose>
                    <xsl:when test="string(images/image[2]/url)">
                    <xsl:for-each select="images/image">
                        <xsl:if test="not(url = $img) and not(position() &gt; 9)">
                            <xsl:element name="g:additional_image_link">
                                <xsl:value-of select="url" />    
                            </xsl:element>
                        </xsl:if>
                    </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                    <xsl:for-each select="parent_item/images/image">
                        <xsl:if test="not(url = $img) and not(position() &gt; 9)">
                            <xsl:element name="g:additional_image_link">
                                <xsl:value-of select="url" />    
                            </xsl:element>
                        </xsl:if>
                    </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>       


                <xsl:element name="g:condition"><xsl:text>new</xsl:text></xsl:element>
                <xsl:element name="g:availability">
                        <xsl:choose>
			<xsl:when test="type_id='configurable' and count(child_products/child_product[qty &gt; 0 or stock/qty &gt; 0]) = 0"><xsl:text>out of stock</xsl:text></xsl:when>
                        <xsl:when test="stock/manage_stock = 0 or stock/qty  &gt; 0 or qty &gt; 0 or count(child_products/child_product[stock/qty &gt; 0 or qty &gt; 0]) &gt; 0"><xsl:text>in stock</xsl:text></xsl:when>
                        <xsl:otherwise><xsl:text>out of stock</xsl:text></xsl:otherwise>
                        </xsl:choose>
                </xsl:element>

                <xsl:element name="g:price">
		<xsl:choose>
		<xsl:when test="string(original_price)"><xsl:value-of select="php:functionString('number_format', sum(original_price), 2, '.', '')"/><xsl:value-of select="concat(' ', $currency)"/></xsl:when>
		<xsl:otherwise>
		<xsl:value-of select="php:functionString('number_format', sum(price), 2, '.', '')"/><xsl:value-of select="concat(' ', $currency)"/>
		</xsl:otherwise>
		</xsl:choose>
		</xsl:element>
                
                <xsl:if test="special_price &gt; 0 and special_price_active = 1">
                    <xsl:element name="g:sale_price"><xsl:value-of select="php:functionString('number_format', sum(special_price), 2, '.', '')"/><xsl:value-of select="concat(' ', $currency)"/></xsl:element>
                    <xsl:if test="string(special_from_date) and string(special_to_date)">
                        <xsl:element name="g:sale_price_effective_date">
                        <xsl:value-of select="concat(php:functionString('substr',special_from_date,0,10),'T',php:functionString('substr',special_from_date,11,5),'+0100/',php:functionString('substr',special_to_date,0,10),'T',php:functionString('substr',special_to_date,11,5),'+0100')" />
                        </xsl:element>
                    </xsl:if>
                </xsl:if>

                <xsl:element name="g:brand"><xsl:value-of select="'Rocket Science Sports'"/></xsl:element>

                <!--xsl:element name="g:brand"><xsl:choose><xsl:when test="string(brand)"><xsl:value-of select="brand"/></xsl:when><xsl:otherwise><xsl:value-of select="manufacturer"/></xsl:otherwise></xsl:choose></xsl:element-->
                <xsl:element name="g:gtin"><xsl:choose><xsl:when test="string(ean)"><xsl:value-of select="ean"/></xsl:when><xsl:otherwise><xsl:value-of select="upc"/></xsl:otherwise></xsl:choose></xsl:element> 
                <xsl:element name="g:mpn"><xsl:choose><xsl:when test="string(mpn)"><xsl:value-of select="mpn"/></xsl:when><xsl:otherwise><xsl:value-of select="sku"/></xsl:otherwise></xsl:choose></xsl:element>
                <xsl:element name="g:identifier_exists"><xsl:text>TRUE</xsl:text></xsl:element> 

                <!-- informations regarding clothing -->

                <xsl:element name="g:gender"/>
                <xsl:element name="g:age_group"/>

                <xsl:element name="g:size">
                    <xsl:choose>
                    <xsl:when test="string(size)"><xsl:value-of select="size" /></xsl:when>
                    <xsl:otherwise>
                    <xsl:value-of select="parent_item/size" />
                    </xsl:otherwise>
                    </xsl:choose>
                </xsl:element>

                <!-- information regarding configurable products -->
                <xsl:element name="g:item_group_id">
                    <xsl:choose>
                        <xsl:when test="string(parent_item/sku)">
                        <xsl:value-of select="parent_item/sku"/>
                        </xsl:when>
                    </xsl:choose>
                </xsl:element>

                <xsl:element name="g:color">
                    <xsl:choose>
                    <xsl:when test="string(color)"><xsl:value-of select="color" /></xsl:when>
                    <xsl:otherwise>
                    <xsl:value-of select="parent_item/color"/>
                    </xsl:otherwise>
                    </xsl:choose>                
                </xsl:element>

                
		<xsl:element name="g:is_bundle">
		<xsl:choose>              
		<xsl:when test="type_id='bundle'"><xsl:text>true</xsl:text></xsl:when>
		<xsl:otherwise>
		<xsl:text>false</xsl:text>
		</xsl:otherwise>
		</xsl:choose>
                </xsl:element>

                <xsl:element name="g:material"/> <!-- required for clothes in G, F, GB, J, USA -->
                <xsl:element name="g:pattern"/> <!-- required for clothes in G, F, GB, J, USA -->

		<xsl:element name="g:shipping_weight"><xsl:if test="string(weight)"><xsl:value-of select="weight"/><xsl:text> kg</xsl:text></xsl:if></xsl:element>


                <!-- information regarding shipping cost and tax -->
                <xsl:element name="g:tax"/> <!-- only for products in the US -->
                <!--<xsl:element name="g:shipping">
                    <xsl:element name="g:country"><xsl:text>US</xsl:text></xsl:element>
                    <xsl:element name="g:region"><xsl:text></xsl:text></xsl:element> 
                    <xsl:element name="g:service"><xsl:text></xsl:text></xsl:element> 
                    <xsl:element name="g:price"><xsl:text>0</xsl:text><xsl:value-of select="concat(' ', $currency)"/></xsl:element> 
                </xsl:element>-->

                <!-- merchant defined multipacks -->
                <xsl:element name="g:multipack"/> <!-- includes the number of identical products in one Mulitpack ; attribute 'price' has to include the multipack price then-->

                <!-- adult explicit products -->
                <xsl:element name="g:adult"/> 

                <!-- Adwords Attributes -->
                <xsl:element name="g:adwords_grouping"/>
                <xsl:element name="g:adwords_labels"/>
                <xsl:element name="g:adwords_redirect"/>

                <!-- unit pricing -->
                <xsl:element name="g:unit_pricing_measure"><xsl:value-of select="php:functionString('strtolower', concat(base_price_amount, ' ', base_price_unit_raw))"/></xsl:element>
                <xsl:element name="g:unit_pricing_base_measure"><xsl:value-of select="php:functionString('strtolower', concat(base_price_base_amount, ' ', base_price_base_unit_raw))"/></xsl:element>

                <!-- energy efficieny classes (EU and switzerland only) -->
                <xsl:element name="g:energy_efficiency_class"/>

                <!-- additional attributes -->
                <xsl:element name="g:online_only"/> <!-- y if product is available online only -->

                <!-- Google Shopping Actions / Destinations.. See: https://support.google.com/merchants/answer/7378924 -->
                <!--<xsl:element name="g:excluded_destination"></xsl:element>--> <!-- Example: Shopping Actions -->
                <!--<xsl:element name="g:included_destination"></xsl:element>--> <!-- Example: Shopping Ads, Shopping Actions, Display Ads, Local Shopping, Surfaces across Google -->
            </xsl:element>
        </xsl:for-each>
    </channel>
</rss>
</xsl:template>
</xsl:stylesheet>
</file>
</files>
